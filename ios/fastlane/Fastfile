default_platform(:ios)

# --- Constants ---
APP_VERSION = "1.0.0" # App version
ENV['FASTLANE_APP_IDENTIFIER'] ||= "com.blabla.blabla" # Default App Identifier

platform :ios do
  # Optional: Define environment variables if needed
  # ENV['FASTLANE_USER'] = "" # Apple ID
  # ENV['FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD'] = "" # App-Specific Password
  # ENV['FASTLANE_ITC_TEAM_ID'] = "" # App Store Connect Team ID

  # --- Helper Methods ---

  def increment_build_number_based_on_testflight(version:)
    latest_build = latest_testflight_build_number(version: version)
    new_build = latest_build ? latest_build + 1 : 1
    UI.success("üìà Build number incremented to #{new_build}")
    new_build
  end

  def find_latest_ipa(build_environment)
    ipa_dir = File.expand_path("../../../build/ios/archive/ipa/#{build_environment}", __FILE__)
    ipa_files = Dir.glob("#{ipa_dir}/*.ipa").sort_by { |f| File.mtime(f) }
    UI.user_error!("No IPA files found in '#{ipa_dir}'") if ipa_files.empty?
    ipa_files.last
  end

  def read_pr_description
    pr_file = File.expand_path("../../../pr_description.txt", __FILE__)
    File.exist?(pr_file) ? File.read(pr_file).strip : "No PR description provided"
  end

  # --- Lanes ---

  desc "Authenticate with App Store Connect"
  lane :login_to_app_store_connect do
    app_store_connect_api_key(
      key_id: "",        # Your API Key ID
      issuer_id: "",     # Your Issuer ID
      key_filepath: "",  # Path to your .p8 key
      duration: 1200,
      in_house: false
    )
  end

  desc "Flutter pub get and iOS pod install"
  lane :flutter_get_pubs do
    Dir.chdir("../../") do
      sh("fvm flutter pub get")
      sh("cd ios && pod install")
    end
  end

  desc "Build iOS IPA"
  lane :build_ios_ipa do |options|
    build_environment = options[:env] || "development"
    app_identifier = options[:app_identifier] || ENV['FASTLANE_APP_IDENTIFIER']
    flutter_flavor = options[:flutter_flavor] || "development"
    app_env_var = options[:app_env] || "dev"
    app_version = APP_VERSION

    ENV['FASTLANE_APP_IDENTIFIER'] = app_identifier

    new_build_number = increment_build_number_based_on_testflight(version: app_version)

    obfuscation = build_environment == "prod" ? "--obfuscate --split-debug-info=./symbols/#{build_environment}/ios" : ""

    Dir.chdir("../../") do
      sh("fvm flutter build ipa --flavor=#{flutter_flavor} --dart-define=APP_ENV=#{app_env_var} --release #{obfuscation} --build-name=#{app_version} --build-number=#{new_build_number}")
    end

    UI.success("‚úÖ iOS IPA build completed")
  end

  desc "Export IPA from archive"
  lane :export_ios_ipa do |options|
    build_environment = options[:env]

    Dir.chdir("../../") do
      sh("xcodebuild -exportArchive -archivePath ./build/ios/archive/Runner.xcarchive -exportOptionsPlist ./ios/exportOptions.plist -exportPath ./build/ios/archive/ipa/#{build_environment} -allowProvisioningUpdates ENABLE_BITCODE=NO")
    end
  end

  desc "Upload IPA to TestFlight"
  lane :upload_ios_to_testflight do |options|
    build_environment = options[:env]

    latest_ipa = find_latest_ipa(build_environment)
    changelog = read_pr_description

    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      ipa: latest_ipa,
      changelog: "Changelog: #{changelog}",
      localized_build_info: {
        "default" => { whats_new: changelog }
      }
    )
  end

  desc "Upload dSYM to Crashlytics"
  lane :upload_dsyms_to_crashlytics do |options|
    firebase_app_id = options[:firebase_app_id]
    firebase_api_key = options[:firebase_api_key]

    Dir.chdir("../../build/ios/archive/Runner.xcarchive/") do
      sh("zip -r dsyms.zip dSYMs")
    end

    upload_symbols_to_crashlytics(
      dsym_path: "../build/ios/archive/Runner.xcarchive/dsyms.zip",
      app_id: firebase_app_id,
      api_token: firebase_api_key
    )
  end

  desc "Complete iOS release process"
  lane :release_ios_app do |options|
    begin
      login_to_app_store_connect

      build_environment = options[:env]
      app_identifier = options[:app_identifier]
      flutter_flavor = options[:flutter_flavor]
      app_env_var = options[:app_env]
      firebase_app_id = options[:firebase_app_id]
      firebase_api_key = "YOUR_FIREBASE_API_KEY"

      flutter_get_pubs
      build_ios_ipa(env: build_environment, app_identifier: app_identifier, flutter_flavor: flutter_flavor, app_env: app_env_var)
      export_ios_ipa(env: build_environment)
      upload_ios_to_testflight(env: build_environment)
      upload_dsyms_to_crashlytics(firebase_app_id: firebase_app_id, firebase_api_key: firebase_api_key)

      UI.success("üöÄ Release completed successfully!")
    rescue => error
      UI.error("‚ùå Release failed: #{error}")
      exit 1
    end
  end

  # --- Environment Specific Lanes ---

  desc "Release iOS Production"
  lane :release_ios_prod do
    release_ios_app(
      env: "prod",
      app_identifier: "com.example.production",
      flutter_flavor: "production",
      app_env: "prod",
      firebase_app_id: "YOUR_PRODUCTION_FIREBASE_APP_ID"
    )
  end

  desc "Release iOS Development"
  lane :release_ios_dev do
    release_ios_app(
      env: "dev",
      app_identifier: "com.example.dev",
      flutter_flavor: "development",
      app_env: "dev",
      firebase_app_id: "YOUR_DEV_FIREBASE_APP_ID"
    )
  end

  desc "Release iOS Staging"
  lane :release_ios_stg do
    release_ios_app(
      env: "stage",
      app_identifier: "com.example.stg",
      flutter_flavor: "staging",
      app_env: "stage",
      firebase_app_id: "YOUR_STAGE_FIREBASE_APP_ID"
    )
  end
end
